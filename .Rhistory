precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionKernelSVM <- mean(as.numeric(cvKernelSVM))
precisionKernelSVM
library(e1071)
cvKernelSVM <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- svm(as.factor(Season) ~ ., data = training_fold, kernel = "linear", cost = 10)
prediccion <- predict(clasificador,new=training_set)
print(prediccion)
mc <- with(training_set,(table(prediccion,Season)))
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionKernelSVM <- mean(as.numeric(cvKernelSVM))
precisionKernelSVM
library(e1071)
cvKernelSVM <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- svm(as.factor(Season) ~ ., data = training_fold, kernel = "linear", cost = 10)
prediccion <- predict(clasificador,new=training_set)
mc <- with(training_set,(table(prediccion,Season)))
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionKernelSVM <- mean(as.numeric(cvKernelSVM))
precisionKernelSVM
t <- proc.time() # Inicia el cronómetro
tree <- rpart(Season ~ New.cases + New.deaths + New.recovered, data_arbol, method="class")
proc.time()-t    # Detiene el cronómetro
rpart.plot(tree)
t <- proc.time() # Inicia el cronómetro
nb <- naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, data)
proc.time()-t    # Detiene el cronómetro
plot(nb)
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
t <- proc.time() # Inicia el cronómetro
modelo = svm(as.factor(Season) ~ ., data = data, kernel = "linear", cost = 10, scale = FALSE)
proc.time()-t    # Detiene el cronómetro
library(rpart)
library(rpart.plot)
library(caret)
library(caTools)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
install.packages("viridis")
library(ComplexHeatmap)
library(viridis)
colores <- magma(256)
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE, row.names = 1,
as.is=TRUE)
data$Season <- as.numeric(as.factor(data$Season))
head(data)
data <- as.matrix(data)
data <- scale(data)
Heatmap(matrix = data, name = "Clusters",
row_title = "observaciones",
column_title = "variables",
row_names_gp = gpar(fontsize = 7),
clustering_distance_columns = "euclidean",
clustering_distance_rows = "euclidean",
clustering_method_columns = "average",
clustering_method_rows = "average")
summary(km.out) # Inspect the result
km.out <- kmeans(data[0:15], centers = 2, nstart = 20)
summary(km.out) # Inspect the result
print(km.out)
plot(data,
col = km.out$cluster,
main = "k-means with 2 clusters")
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
library(naivebayes)
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
precisionNaiveBayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
precisionNaiveBayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
precisionNaiveBayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
precisionNaiveBayes
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ ., data = data, kernel = "linear")
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ ., data = data, kernel = "linear")
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ ., data = data, kernel = "linear")
plot(modelo, dat)
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ ., data = data, kernel = "linear")
plot(modelo, dat)
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ New.cases, data = data, kernel = "linear")
plot(modelo, dat)
library(e1071)
cvKernelSVM <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- svm(as.factor(Season) ~ ., data = training_fold, kernel = "linear", cost = 10)
prediccion <- predict(clasificador,new=training_set)
mc <- with(training_set,(table(prediccion,Season)))
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionKernelSVM <- mean(as.numeric(cvKernelSVM))
precisionKernelSVM
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ New.cases + New.death + New.recover, data = data, kernel = "linear")
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ New.cases + New.deaths + New.recover, data = data, kernel = "linear")
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ New.cases + New.deaths + New.recovers, data = data, kernel = "linear")
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ New.cases + New.deaths + New.recovered, data = data, kernel = "linear")
plot(modelo, dat)
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ New.cases + New.deaths + New.recovered, data = data, kernel = "linear")
library(e1071)
cvKernelSVM <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- svm(as.factor(Season) ~ ., data = training_fold, kernel = "linear", cost = 10)
prediccion <- predict(clasificador,new=training_set)
mc <- with(training_set,(table(prediccion,Season)))
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionKernelSVM <- mean(as.numeric(cvKernelSVM))
precisionKernelSVM
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ New.cases + New.deaths + New.recovered, data = data, kernel = "linear")
plot(modelo,data)
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ New.cases + New.deaths + New.recovered, data = data, kernel = "linear")
plot(modelo)
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
dat = data.frame(x= data$New.cases, y = as.factor(data$Season))
modelo = svm(as.factor(Season) ~ New.cases + New.deaths + New.recovered, data = data, kernel = "linear")
plot(modelo, data = dat)
tree <- rpart(Season ~ New.cases + New.deaths + New.recovered, data_arbol, method="class")
rpart.plot(tree)
set.seed(1234)
split <- sample.split(data_arbol$Season, SplitRatio = 0.80)
training_set <- subset(data_arbol, split == TRUE)
test_set <- subset(data_arbol, split == FALSE)
folds <- createFolds(training_set$Season, k = 10)
cvDecisionTree <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- rpart(Season ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold, type = 'class')
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionDecisionTree  <- mean(as.numeric(cvDecisionTree))
precisionDecisionTree
library(e1071)
# Ejecución del modelo SVM
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
modelo = svm(as.factor(Season) ~ New.cases + New.deaths + New.recovered, data = data, kernel = "linear")
library(e1071)
cvKernelSVM <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- svm(as.factor(Season) ~ ., data = training_fold, kernel = "linear", cost = 10)
prediccion <- predict(clasificador,new=training_set)
mc <- with(training_set,(table(prediccion,Season)))
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionKernelSVM <- mean(as.numeric(cvKernelSVM))
precisionKernelSVM
library(e1071)
cvKernelSVM <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- svm(as.factor(Season) ~ ., data = training_fold, kernel = "linear", cost = 10)
prediccion <- predict(clasificador,new=training_set)
prediccion
mc <- with(training_set,(table(prediccion,Season)))
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionKernelSVM <- mean(as.numeric(cvKernelSVM))
precisionKernelSVM
library(e1071)
cvKernelSVM <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- svm(as.factor(Season) ~ ., data = training_fold, kernel = "linear", cost = 10)
prediccion <- predict(clasificador,new=training_set)
print(prediccion)
mc <- with(training_set,(table(prediccion,Season)))
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionKernelSVM <- mean(as.numeric(cvKernelSVM))
precisionKernelSVM
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
y_pred
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
nb <- naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, data)
library(naivebayes)
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
nb <- naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, data)
plot(nb)
nb$tables
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
precisionNaiveBayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
y_pred
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
precisionNaiveBayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
print(y_pred)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
precisionNaiveBayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
print(y_pred)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
precisionNaiveBayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <-  naive_bayes(as.factor(Season) ~ New.cases + New.deaths + New.recovered, training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
precisionNaiveBayes
table(training_set$Season)
table(test_set$Season)
folds <- createFolds(training_set$Season, k = 10)
library(rpart)
library(rpart.plot)
library(caret)
library(caTools)
data_arbol <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
tree <- rpart(Season ~ New.cases + New.deaths + New.recovered, data_arbol, method="class")
rpart.plot(tree)
set.seed(1234)
split <- sample.split(data_arbol$Season, SplitRatio = 0.80)
training_set <- subset(data_arbol, split == TRUE)
test_set <- subset(data_arbol, split == FALSE)
table(training_set$Season)
table(test_set$Season)
folds <- createFolds(training_set$Season, k = 10)
folds <- createFolds(training_set$Season, k = 10)
cvDecisionTree <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- rpart(Season ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold, type = 'class')
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionDecisionTree  <- mean(as.numeric(cvDecisionTree))
precisionDecisionTree
set.seed(1234)
table(training_set$Season)
table(test_set$Season)
folds <- createFolds(training_set$Season, k = 10)
cvDecisionTree <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- rpart(Season ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold, type = 'class')
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionDecisionTree  <- mean(as.numeric(cvDecisionTree))
precisionDecisionTree
cvDecisionTree <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- rpart(Season ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold, type = 'class')
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionDecisionTree  <- mean(as.numeric(cvDecisionTree))
precisionDecisionTree
set.seed(1234)
split <- sample.split(data_arbol$Season, SplitRatio = 0.80)
training_set <- subset(data_arbol, split == TRUE)
test_set <- subset(data_arbol, split == FALSE)
folds <- createFolds(training_set$Season, k = 10)
cvDecisionTree <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- rpart(Season ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold, type = 'class')
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionDecisionTree  <- mean(as.numeric(cvDecisionTree))
precisionDecisionTree
library(e1071)
cvKernelSVM <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- svm(as.factor(Season) ~ ., data = training_fold, kernel = "linear", cost = 10)
prediccion <- predict(clasificador,new=training_set)
mc <- with(training_set,(table(prediccion,Season)))
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Season, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionKernelSVM <- mean(as.numeric(cvKernelSVM))
precisionKernelSVM
library("FactoMineR")
data <- read.delim('datos_nuevos_casos/regresion_train_kmeans.csv', sep=",", head = TRUE)
head(data)
data <- read.delim('datos_nuevos_casos/regresion_train_kmeans.csv', sep=",", head = TRUE)
head(data)
pca <- prcomp(data)
pca$sdev
pca$sdev^2
pca2.nci <- PCA(X = data, scale.unit = TRUE, ncp = 64, graph = FALSE)
library(factoextra)
fviz_pca_ind(pca, geom.ind = "point",
col.ind = "#FC4E07",
axes = c(1, 2),
pointsize = 1.5)
library("dbscan")
data <- read.delim('datos_nuevos_casos/regresion_train.csv', sep=",", head = TRUE)
data$Season <- NULL
head(data)
#df: dataset sin variable "species"
#k: el número mínimo de puntos que elegimos
kNNdistplot(data, k = 15)
abline(h = 1000000, lty = 2)
cl<-dbscan(data,eps=1000000,MinPts = 5)
unique(cl$cluster)
hullplot(data,cl$cluster, main = "Convex cluster Hulls, eps=1000000")
cl<-dbscan(data,eps=3000000,MinPts = 5)
unique(cl$cluster)
hullplot(data,cl$cluster, main = "Convex cluster Hulls, eps=3000000")
wss <- 0
value <- 0
i <- 1000000
index <- 0
while(i<=5000000) {
km.out <- dbscan(data,eps=i,MinPts = 5)
wss[index] <- km.out$cluster
value[index] <- i
i<-i+1000
index <- index + 1
}
plot(value, wss, type = "b", xlab = "Valor de EPS", ylab="Number of Clusters")
wss <- 0
value <- 0
i <- 1000000
index <- 0
while(i<=5000000) {
km.out <- dbscan(data,eps=i,MinPts = 5)
wss[index] <- km.out$cluster
value[index] <- i
i<-i+1000
index <- index + 1
}
plot(value, wss, type = "b", xlab = "Valor de EPS", ylab="Number of Clusters")
