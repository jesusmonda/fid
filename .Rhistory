# Instalamos la librería rattle
install.packages("rattle")
library(rpart)
library(rpart.plot)
# Vamos a realizar un clasificador para determinar si más importante predecir por día o mes, para ello lo primero que tenemos que hacer es cargar los datos.
data <- read.delim('agrupar_datos/agrupados_datos.csv', sep=",", head = TRUE)
colnames(data)
# Dibujamos el arbol
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
```{r}
```{r}
data <- read.table('regresion_train.csv', header = TRUE)
data <- read.table('regresion_train.csv', header = TRUE)
data <- read.table('regresion_train.csv', header = TRUE)
data <- read.table('regresion_train.csv', header = TRUE)
data <- read.delim('regresion_train.csv', sep=",", head = TRUE)
data <- read.delim('regresion_train.csv', sep=",", head = TRUE)
regresion <- lm(ObservationDate ~ Confirmed, data = data)
summary(regresion)
data <- read.delim('regresion_train.csv', sep=",", head = TRUE)
regresion <- lm(ObservationDate ~ Confirmed, data = data)
summary(regresion)
data <- read.delim('regresion_train.csv', sep=",", head = TRUE)
regresion <- lm(ObservationDate ~ Confirmed, data = data)
summary(regresion)
data <- read.delim('regresion_train.csv', sep=",", head = TRUE)
regresion <- lm(ObservationDate ~ Confirmed, data = data)
summary(regresion)
plot(data$Confirmed, data$ObservationDate, xlab='Confirmed', ylab='ObservationDate')
abline(regresion)
confirmed <- data.frame(Confirmed = seq(30, 50))
predict(regresion, confirmed)
regresion <- lm(Confirmed~ObservationDate, data = data)
summary(regresion)
plot(data$ObservationDate, data$Confirmed, xlab='ObservationDate', ylab='Confirmed')
abline(regresion)
plot(data$ObservationDate, data$Confirmed, xlab='ObservationDate', ylab='Confirmed')
abline(regresion)
confirmed <- data.frame(ObservationDate = 09282020)
predict(regresion, confirmed)
confirmed <- data.frame(ObservationDate = 09282020)
predict(regresion, confirmed)
data <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
data <- read.delim('arbol_train.csv', sep=",", head = TRUE)
colnames(data)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
data <- read.delim('arbol_train.csv', sep=",", head = TRUE)
colnames(data)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
data <- read.delim('arbol_train.csv', sep=",", head = TRUE)
colnames(data)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
View(test)
data <- read.delim('arbol_train.csv', sep=",", head = TRUE)
colnames(data)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
data <- read.delim('arbol_train.csv', sep=",", head = TRUE)
colnames(data)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
conf <- table(test$Survived, pred)
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
acc <- sum(diag(conf)) / sum(conf)
print(acc)
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
acc <- sum(diag(conf)) / sum(conf)
print(acc)
test <- read.delim('arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
acc <- sum(diag(conf)) / sum(conf)
print(acc)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
acc <- sum(diag(conf)) / sum(conf)
print(acc)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
View(conf)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
View(conf)
acc <- sum(diag(conf)) / sum(conf)
print(acc)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
View(conf)
acc <- sum(diag(conf)) / sum(conf)
print(acc)
install.packages("rattle")
library(rpart)
library(rpart.plot)
data <- read.delim('datos/arbol_train.csv', sep=",", head = TRUE)
colnames(data)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
test <- read.delim('datos/arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
View(conf)
acc <- sum(diag(conf)) / sum(conf)
print(acc)
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
regresion <- lm(Confirmed~ObservationDate, data = data)
summary(regresion)
plot(data$ObservationDate, data$Confirmed, xlab='ObservationDate', ylab='Confirmed')
abline(regresion)
confirmed <- data.frame(ObservationDate = 09282020)
predict(regresion, confirmed)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
pruned <- prune(tree, cp = 0.01)
rpart.plot(pruned)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
data <- read.delim('datos/arbol_train.csv', sep=",", head = TRUE)
colnames(data)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
pruned <- prune(tree, cp = 0.01)
pruned <- prune(tree, cp = 0.01)
fancyRpartPlot(pruned)
pruned <- prune(tree, cp = 0.01)
rpart.plot(pruned)
pruned <- prune(tree, cp = 0.1)
rpart.plot(pruned)
pruned <- prune(tree, cp = 0.001)
rpart.plot(pruned)
pruned <- prune(tree, cp = 0.0001)
rpart.plot(pruned)
pruned <- prune(tree, cp = 0.1)
rpart.plot(pruned)
pruned <- prune(tree, cp = 0.15)
rpart.plot(pruned)
pruned <- prune(tree, cp = 0.015)
rpart.plot(pruned)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
View(conf)
acc <- sum(diag(conf)) / sum(conf)
print(acc)
View(data)
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
View(data)
install.packages("keras")
library(keras)
install_keras()
# Cargar de conjunto de entrenamiento de imágenes numéricas
mnist <- dataset_mnist()
View(test)
View(test)
yes
View(test)
# Cargar de conjunto de entrenamiento de imágenes numéricas
test <- read.delim('datos/arbol_test.csv', sep=",", head = TRUE)
train <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
date_train <- train$ObservationDate
confirmed_train <- train$Confirmed
date_test <- test$ObservationDate
confirmed_test <- test$Confirmed
# Definir el modelo
model <- keras_model_sequential()
library(naivebayes)
install.packages("naivebayes")
library(naivebayes)
install.packages("naivebayes")
install.packages("naivebayes")
install.packages("naivebayes")
install.packages("naivebayes")
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(confirmed ~ ObservationDate, data = data)#, laplace = 1)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(confirmed ~ ObservationDate, data = data)#, laplace = 1)
library(naivebayes)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(confirmed ~ ObservationDate, data = data)#, laplace = 1)
View(data)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(Confirmed ~ ObservationDate, data = data)#, laplace = 1)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(Confirmed ~ ObservationDate, data = data)#, laplace = 1)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(Confirmed ~ ObservationDate + Country, data = data)#, laplace = 1)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(Confirmed ~ ObservationDate + Country, data = data)#, laplace = 1)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(Confirmed ~ ObservationDate + Country, data = data)#, laplace = 1)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(Confirmed ~ ObservationDate + Country, data = data)#, laplace = 1)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
m <- naive_bayes(Confirmed ~., data = data)#, laplace = 1)
test <- read.delim('datos/arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
data <- read.delim('datos/arbol_train.csv', sep=",", head = TRUE)
colnames(data)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
install.packages("rattle")
library(rpart)
library(rpart.plot)
data <- read.delim('datos/arbol_train.csv', sep=",", head = TRUE)
colnames(data)
tree <- rpart(Confirmed ~ ., data, method="class", minsplit = 2)
rpart.plot(tree)
test <- read.delim('datos/arbol_test.csv', sep=",", head = TRUE)
colnames(data)
pred <- predict(tree, test, type="class")
conf <- table(test$Confirmed, pred)
View(conf)
acc <- sum(diag(conf)) / sum(conf)
print(acc)
View(data)
# creamos el modelo de pronostico
data <- read.delim('datos/regresion_train.csv', sep=",", head = TRUE)
reg <- glm(Confirmed ~ ObservationDate, data = data, family = binomial)
# creamos el modelo de pronostico
data_sintomas <- read.delim('datos_sintomas/Cleaned_Data.csv', sep=",", head = TRUE)
# creamos el modelo de pronostico
data_sintomas <- read.delim('datos_sintomas/Cleaned-Data.csv', sep=",", head = TRUE)
reg <- glm(Confirmed ~ ObservationDate, data = data, family = binomial)
View(data_sintomas)
# creamos el modelo de pronostico
data_sintomas <- read.delim('datos_sintomas/Cleaned-Data.csv', sep=",", head = TRUE)
reg <- glm(Sevirity_Severe ~ Age_60., data = data_sintomas, family = binomial)
# creamos el modelo de pronostico
data_sintomas <- read.delim('datos_sintomas/Cleaned-Data.csv', sep=",", head = TRUE)
reg <- glm(Severity_Severe ~ Age_60., data = data_sintomas, family = binomial)
summary(reg)
# creamos el modelo de pronostico
reg <- glm(Severity_Severe ~ Age_60., data = data_sintomas, family = binomial)
summary(reg)
# representamos graficamente el modelo
plot(m)
# creamos el modelo de pronostico
m <- naive_bayes(Severity_Severe ~ Age_60., data = data_sintomas)#, laplace = 1)
# creamos el modelo de pronostico
m <- naive_bayes(Severity_Severe ~ Age_60. + Gender_Female, data = data_sintomas)#, laplace = 1)
# creamos el modelo de pronostico
m <- naive_bayes(Severity_Severe ~ Age_60. + Gender_Female, data = data_sintomas)#, laplace = 1)
# creamos el modelo de pronostico
m <- naive_bayes(Severity_Severe ~ Age_60. + Gender_Female, data = data_sintomas)#, laplace = 1)
# creamos el modelo de pronostico
m <- naive_bayes(Severity_Severe ~ Age_60. + Gender_Female, data = data_sintomas)#, laplace = 1)
# creamos el modelo de pronostico
reg <- glm(Severity_Severe ~ Age_60., data = data_sintomas, family = binomial)
datos_probab <- data.frame(temperatura = seq(50, 85, 0.1))
datos.predict <- predict(reg, datos_probab, type = "response")  # por defecto calcularía log p_i/(1-p_i), para calcular p_i usamos el argumento type
# creamos el modelo de pronostico
reg <- glm(Severity_Severe ~ Age_60, data = data_sintomas, family = binomial)
# creamos el modelo de pronostico
reg <- glm(Severity_Severe ~ Age_60., data = data_sintomas, family = binomial)
datos_probab <- data.frame(temperatura = seq(50, 85, 0.1))
datos.predict <- predict(reg, datos_probab, type = "response")  # por defecto calcularía log p_i/(1-p_i), para calcular p_i usamos el argumento type
# creamos el modelo de pronostico
reg <- glm(Severity_Severe ~ Age_60., data = data_sintomas, family = binomial)
datos_probab <- data.frame(Severity_Severe))
# creamos el modelo de pronostico
reg <- glm(Severity_Severe ~ Age_60., data = data_sintomas, family = binomial)
datos_probab <- data.frame(Severity_Severe)
# creamos el modelo de pronostico
reg <- glm(Severity_Severe ~ Age_60., data = data_sintomas, family = binomial)
datos_probab <- data.frame(data_sintomas)
datos.predict <- predict(reg, datos_probab, type = "response")  # por defecto calcularía log p_i/(1-p_i), para calcular p_i usamos el argumento type
plot(data_sintomas$Severity_Severe, data_sintomas$Age_60., pch = 21, bg = colores,  xlab = "Temperatura", ylab = "Prob. defecto")
install.packages("randomForest")
library(randomForest)
# creamos el modelo de pronostico
modelo <- randomForest(Severity_Severe~., data=data_sintomas)
# creamos el modelo de pronostico
nb_laplace1 <- naiveBayes(Severity_Severe~., data=data_sintomas, laplace=1)
library(e1071)
install.packages("e1071")
library(e1071)
data_sintomas <- read.delim('datos_sintomas/Cleaned-Data.csv', sep=",", head = TRUE)
# creamos el modelo de pronostico
nb_laplace1 <- naiveBayes(Severity_Severe~., data=data_sintomas, laplace=1)
laplace1_pred <- predict(nb_laplace1, test, type="class")
# creamos el modelo de pronostico
nb_laplace1 <- naiveBayes(Severity_Severe~., data=data_sintomas, laplace=1)
# creamos el modelo de pronostico
nb_laplace1 <- naiveBayes(Severity_Severe~., data=data_sintomas, laplace=1)
test <- naive_data[(nrow(naive_data)*.7+1):nrow(naive_data),]
# creamos el modelo de pronostico
nb_laplace1 <- naiveBayes(Severity_Severe~., data=data_sintomas, laplace=1)
test <- naive_data[(nrow(data_sintomas)*.7+1):nrow(data_sintomas),]
# creamos el modelo de pronostico
nb_laplace1 <- naiveBayes(Severity_Severe~., data=data_sintomas, laplace=1)
test <- data_sintomas[(nrow(data_sintomas)*.7+1):nrow(data_sintomas),]
View(test)
# creamos el modelo de pronostico
nb_laplace1 <- naiveBayes(Severity_Severe~., data=data_sintomas, laplace=1)
test <- data_sintomas[(nrow(data_sintomas)*.7+1):nrow(data_sintomas),]
default_pred <- predict(nb_default, test, type="class")
# creamos el modelo de pronostico
nb_laplace1 <- naiveBayes(Severity_Severe~., data=data_sintomas, laplace=1)
laplace1_pred <- predict(nb_laplace1, test, type="class")
default_pred <- predict(nb_default, test, type="class")
# creamos el modelo de pronostico
nb_laplace1 <- naiveBayes(Severity_Severe~., data=data_sintomas, laplace=1)
laplace1_pred <- predict(nb_laplace1, test, type="class")
table(laplace1_pred, test$response,dnn=c("Prediction","Actual"))
View(data_sintomas)
data_sintomas <- read.delim('datos_sintomas/Cleaned-Data.csv', sep=",", head = TRUE)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severerty_Severe ~ Age_60., data = data_sintomas)
library(naivebayes)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severerty_Severe ~ Age_60., data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severety_Severe ~ Age_60., data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severety_Severe ~ Age_60., data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severety_Severe ~ Age_60., data = data_sintomas)
data_sintomas <- read.delim('datos_sintomas/Cleaned-Data.csv', sep=",", head = TRUE)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severety-Severe ~ Age_60., data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ Age_60., data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ as.character(Age_60.), data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ as.character(Age_60.), data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ Age_60., data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ Age_60., data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ Age_60., data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ Age_60., data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ as.binary(Age_60.), data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ as.binary(Age_60.), data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ as.number(Age_60.), data = data_sintomas)
# creamos el modelo de pronostico
locmodel <- naive_bayes(Severity_Severe ~ as.number(Age_60.), data = data_sintomas)
View(data)
library(keras)
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
library(keras)
model <- keras_model_sequential()
